{"version":3,"file":"static/js/290.de2ed09b.chunk.js","mappings":"0MAKaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OANAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,yCAAG,mGACZH,GAASI,EAAAA,EAAAA,GAAQC,EAAAA,GAAAA,eAAiC,KAAD,sCACxD,kBAFgB,mCAGjBF,GACF,GAAG,IACI,EACT,C,qICkFA,UAlFmB,YACjBJ,EAAAA,EAAAA,KACA,IA6CIO,EA7COC,GAAeC,EAAAA,EAAAA,MAAlBC,EACFC,GAAUC,EAAAA,EAAAA,KAAe,SAACC,GAAC,OAAKA,EAAEC,IAAI,IAI5C,GAOIC,EAAAA,EAAAA,kBACF,CAACP,EAAYG,IACb,SAACK,GAAW,OAAKC,EAAAA,EAAAA,IAAgBD,EAAY,GAC7C,CACEE,iBAAkB,SAACC,GACjB,IAAMC,EAAUD,EAASA,SAASE,MAC5BC,EAAWH,EAASA,SAASI,YAAc,EACjD,OAAOD,GAAYF,EAAUE,OAAWE,CAC1C,IAdFC,EAAS,EAATA,UACAC,EAAO,EAAPA,QACAC,EAAK,EAALA,MACMC,EAAa,EAAnBC,KACAC,EAAW,EAAXA,YACAC,EAAa,EAAbA,cAmCF,IAtBA5B,EAAAA,EAAAA,YAAU,WACR,IAAI6B,GAAW,EACTC,EAAQ,yCAAG,WAAOC,GAAK,kFAEkB,GAD7C,EAEEA,EAAMC,OAAOC,iBADPC,EAAY,EAAZA,aAAcC,EAAS,EAATA,UAAWC,EAAY,EAAZA,aAG5BP,KAAYK,EAAeC,GAA4B,IAAfC,GAAkB,gBAC7C,GAAhBP,GAAW,GACPF,EAAY,CAAD,+BACPC,IAAgB,KAAD,EAEvBC,GAAW,EAAM,2CAEpB,gBAZa,sCAcd,OADAQ,SAASC,iBAAiB,SAAUR,GAC7B,WACLO,SAASE,oBAAoB,SAAUT,EACzC,CACF,GAAG,CAACF,EAAeD,IAGfL,EAAWlB,GAAU,SAAC,KAAM,SAC3B,GAAImB,EACPnB,GAAU,2BAAK,2BAAyBoB,EAAMgB,QAAQ,WACnD,CACH,IAAMC,GAAuB,OAAbhB,QAAa,IAAbA,OAAa,EAAbA,EAAeP,MAAMwB,QAAS,EAC9CtC,GACE,8BACGqC,IACc,OAAbhB,QAAa,IAAbA,OAAa,EAAbA,EAAeP,MAAMyB,KAAI,SAACC,EAAMC,GAAK,aACnC,SAAC,KAAM,CAELvB,UAAWA,EACXC,QAASA,EACTC,MAAOA,EACPE,KAAU,OAAJkB,QAAI,IAAJA,GAAc,QAAV,EAAJA,EAAM5B,gBAAQ,WAAV,EAAJ,EAAgB8B,QACtBC,KAAM,qBAAoB,UALlBF,GAMR,MAIZ,CACA,OACE,SAAC,KAAe,CAACG,UAAW,sBAAsB,UAChD,iBAAKC,UAAU,wBAAuB,WACpC,iBAAKA,UAAU,mCAAkC,WAC/C,UAAC,KAAO,WAAC,oBAAkB5C,EAAW,QACtC,SAAC,KAAU,OAEZD,MAIT,C","sources":["hooks/useRestSort.jsx","pages/Search/NewsSearch.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { apiSectionFilters } from \"../config\";\r\nimport { SORT_BY } from \"../store/slices/newsSortSlice\";\r\nimport { useAppDispatch } from \"../store/store\";\r\n\r\nexport const useResetSort = () => {\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    const sortHandler = async () => {\r\n      await dispatch(SORT_BY(apiSectionFilters.ORDER_BY_NEW));\r\n    };\r\n    sortHandler();\r\n  }, []);\r\n  return \"\";\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useInfiniteQuery } from \"react-query\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  Heading,\r\n  Loader,\r\n  NewsFilter,\r\n  Result,\r\n  ResultContainer,\r\n} from \"../../components\";\r\nimport { useResetSort } from \"../../hooks/useRestSort\";\r\nimport { getNewsBySearch } from \"../../service/section.service\";\r\nimport { useAppSelector } from \"../../store/store\";\r\n\r\nconst NewsSearch = () => {\r\n  useResetSort();\r\n  const { q: searchTerm } = useParams();\r\n  const orderBy = useAppSelector((s) => s.sort);\r\n  const queryString = {\r\n    pageParam: 1,\r\n  };\r\n  const {\r\n    isLoading,\r\n    isError,\r\n    error,\r\n    data: newsSearchRes,\r\n    hasNextPage,\r\n    fetchNextPage,\r\n  } = useInfiniteQuery(\r\n    [searchTerm, orderBy],\r\n    (queryString) => getNewsBySearch(queryString),\r\n    {\r\n      getNextPageParam: (response) => {\r\n        const maxPage = response.response.pages;\r\n        const nextPage = response.response.currentPage + 1;\r\n        return nextPage <= maxPage ? nextPage : undefined;\r\n      },\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    let fetching = false;\r\n    const onScroll = async (event) => {\r\n      // scrollHeight = scrollTop + clientHeight\r\n      const { scrollHeight, scrollTop, clientHeight } =\r\n        event.target.scrollingElement;\r\n\r\n      if (!fetching && scrollHeight - scrollTop <= clientHeight * 1.5) {\r\n        fetching = true;\r\n        if (hasNextPage) {\r\n          await fetchNextPage();\r\n        }\r\n        fetching = false;\r\n      }\r\n    };\r\n    document.addEventListener(\"scroll\", onScroll);\r\n    return () => {\r\n      document.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, [fetchNextPage, hasNextPage]);\r\n\r\n  let content;\r\n  if (isLoading) content = <Loader />;\r\n  else if (isError)\r\n    content = <div> Something went wrong : {error.message} </div>;\r\n  else {\r\n    const isPages = newsSearchRes?.pages.length > 0;\r\n    content = (\r\n      <>\r\n        {isPages &&\r\n          newsSearchRes?.pages.map((page, index) => (\r\n            <Result\r\n              key={`${index}`}\r\n              isLoading={isLoading}\r\n              isError={isError}\r\n              error={error}\r\n              data={page?.response?.results}\r\n              grid={\"tNewsSectionTwo-3\"}\r\n            />\r\n          ))}\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <ResultContainer parentDiv={\"container mtAftrNav\"}>\r\n      <div className=\"minH7 wrapperNewsList\">\r\n        <div className=\"mNewSearchTitle newsSearchHeader\">\r\n          <Heading> Search result : {searchTerm} </Heading>\r\n          <NewsFilter />\r\n        </div>\r\n        {content}\r\n      </div>\r\n    </ResultContainer>\r\n  );\r\n};\r\n\r\nexport default NewsSearch;\r\n"],"names":["useResetSort","dispatch","useAppDispatch","useEffect","sortHandler","SORT_BY","apiSectionFilters","content","searchTerm","useParams","q","orderBy","useAppSelector","s","sort","useInfiniteQuery","queryString","getNewsBySearch","getNextPageParam","response","maxPage","pages","nextPage","currentPage","undefined","isLoading","isError","error","newsSearchRes","data","hasNextPage","fetchNextPage","fetching","onScroll","event","target","scrollingElement","scrollHeight","scrollTop","clientHeight","document","addEventListener","removeEventListener","message","isPages","length","map","page","index","results","grid","parentDiv","className"],"sourceRoot":""}